// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  role          Role      @default(USER)
  cart          Cart[]
  order         Order[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String      @id @default(cuid())
  name        String
  type        String
  price       Float      @default(0.00)
  stripe      Int
  inventory   Boolean    @default(true)
  description String
  percentage  Int
  imageurl    String
  CartItem    CartItem[]
  OrderItem   OrderItem[]

  @@map("products")
}

model Order {
  id        String      @id @default(cuid())
  items     OrderItem[]
  User      User?       @relation(fields: [userId], references: [id])
  userId    String?
  total     Float?
  isPaid    Boolean
  status    String      @default("Pending")
  address   String      @default("")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  sName     String?
  sEmail    String?

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  Product   Product @relation(fields: [ProductId], references: [id], onDelete: Cascade)
  ProductId String
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String

  @@map("orderitems")
}

model Cart {
  id        String     @id @default(cuid())
  items     CartItem[]
  User      User?      @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String  @id @default(cuid())
  Product   Product @relation(fields: [ProductId], references: [id], onDelete: Cascade)
  ProductId String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String

  @@map("cartitems")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  Paid
  Shipped
  Completed
}